import { useState, useEffect } from 'react';
import { Globe, Server, Database, Eye, Clock } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

interface ReconModuleProps {
  target: string;
}

export const ReconModule = ({ target }: ReconModuleProps) => {
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState({
    domainInfo: null,
    subdomains: [],
    whoisData: null,
    dnsRecords: []
  });

  const mockReconData = {
    domainInfo: {
      domain: target,
      registrar: "Cloudflare, Inc.",
      creation: "2009-02-14",
      expiration: "2025-02-14",
      nameservers: ["ns1.cloudflare.com", "ns2.cloudflare.com"]
    },
    subdomains: [
      { subdomain: "www." + target, ip: "104.21.14.101", status: "active" },
      { subdomain: "api." + target, ip: "104.21.14.102", status: "active" },
      { subdomain: "admin." + target, ip: "104.21.14.103", status: "active" },
      { subdomain: "dev." + target, ip: "104.21.14.104", status: "hidden" }
    ],
    whoisData: {
      registrar: "Cloudflare, Inc.",
      registrationDate: "2009-02-14",
      expirationDate: "2025-02-14"
    },
    dnsRecords: [
      { type: "A", name: target, value: "104.21.14.101", ttl: 300 },
      { type: "AAAA", name: target, value: "2606:4700:3032::ac43:8d65", ttl: 300 },
      { type: "MX", name: target, value: "mail.example.com", ttl: 3600 },
      { type: "TXT", name: target, value: "v=spf1 include:_spf.google.com ~all", ttl: 300 }
    ]
  };

  const runRecon = async () => {
    setIsScanning(true);
    // Simulate reconnaissance scan
    await new Promise(resolve => setTimeout(resolve, 3000));
    setResults(mockReconData);
    setIsScanning(false);
  };

  const reconTools = [
    { name: "Domain Intelligence", desc: "WHOIS & DNS Analysis", icon: Globe },
    { name: "Subdomain Enumeration", desc: "Discover hidden subdomains", icon: Server },
    { name: "DNS Reconnaissance", desc: "DNS record analysis", icon: Database },
    { name: "OSINT Gathering", desc: "Open source intelligence", icon: Eye }
  ];

  return (
    <div className="space-y-6">
      <Card className="terminal">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-primary">Reconnaissance Phase</h2>
          <Button 
            onClick={runRecon}
            disabled={!target || isScanning}
            className={`${isScanning ? 'blue-glow' : 'cyber-glow'}`}
          >
            {isScanning ? (
              <>
                <Clock className="h-4 w-4 mr-2 animate-spin" />
                Scanning...
              </>
            ) : (
              'Start Reconnaissance'
            )}
          </Button>
        </div>

        {/* Tools Grid */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          {reconTools.map((tool) => {
            const Icon = tool.icon;
            return (
              <Card key={tool.name} className="p-4 bg-secondary/50 hover:bg-secondary/70 transition-colors">
                <Icon className="h-6 w-6 text-primary mb-2" />
                <h3 className="font-medium text-sm">{tool.name}</h3>
                <p className="text-xs text-muted-foreground">{tool.desc}</p>
              </Card>
            );
          })}
        </div>

        {/* Results */}
        {results.domainInfo && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-primary">Results</h3>
            
            {/* Domain Info */}
            <Card className="bg-secondary/30 border-l-4 border-l-primary">
              <div className="p-4">
                <h4 className="font-semibold mb-2 text-foreground">Domain Information</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-muted-foreground">Domain:</span>
                    <span className="ml-2 text-foreground font-mono">{results.domainInfo.domain}</span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">Registrar:</span>
                    <span className="ml-2 text-foreground font-mono">{results.domainInfo.registrar}</span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">Created:</span>
                    <span className="ml-2 text-foreground font-mono">{results.domainInfo.creation}</span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">Expires:</span>
                    <span className="ml-2 text-foreground font-mono">{results.domainInfo.expiration}</span>
                  </div>
                </div>
              </div>
            </Card>

            {/* Subdomains */}
            <Card className="bg-secondary/30 border-l-4 border-l-accent">
              <div className="p-4">
                <h4 className="font-semibold mb-2 text-foreground">Discovered Subdomains</h4>
                <div className="space-y-2">
                  {results.subdomains.map((sub, index) => (
                    <div key={index} className="flex items-center justify-between bg-card/50 p-2 rounded">
                      <div className="flex items-center space-x-3">
                        <span className="font-mono text-sm text-foreground">{sub.subdomain}</span>
                        <span className="text-xs text-muted-foreground font-mono">{sub.ip}</span>
                      </div>
                      <Badge 
                        variant={sub.status === 'active' ? 'default' : 'secondary'}
                        className={sub.status === 'active' ? 'bg-primary/20 text-primary' : ''}
                      >
                        {sub.status}
                      </Badge>
                    </div>
                  ))}
                </div>
              </div>
            </Card>

            {/* DNS Records */}
            <Card className="bg-secondary/30 border-l-4 border-l-warning">
              <div className="p-4">
                <h4 className="font-semibold mb-2 text-foreground">DNS Records</h4>
                <div className="space-y-2">
                  {results.dnsRecords.map((record, index) => (
                    <div key={index} className="bg-card/50 p-2 rounded">
                      <div className="flex items-center space-x-4 text-sm">
                        <Badge variant="outline" className="font-mono">{record.type}</Badge>
                        <span className="font-mono text-foreground">{record.name}</span>
                        <span className="text-muted-foreground">â†’</span>
                        <span className="font-mono text-primary">{record.value}</span>
                        <span className="text-xs text-muted-foreground">TTL: {record.ttl}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </Card>
          </div>
        )}
      </Card>
    </div>
  );
};