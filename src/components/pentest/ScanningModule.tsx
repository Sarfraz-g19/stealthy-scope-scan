import { useState } from 'react';
import { Radar, Shield, Wifi, Database, Clock, AlertCircle } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

interface ScanningModuleProps {
  target: string;
}

export const ScanningModule = ({ target }: ScanningModuleProps) => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [results, setResults] = useState({
    openPorts: [],
    services: [],
    osFingerprint: null
  });

  const mockScanResults = {
    openPorts: [
      { port: 22, service: "SSH", version: "OpenSSH 8.2p1", state: "open", risk: "low" },
      { port: 80, service: "HTTP", version: "nginx 1.18.0", state: "open", risk: "medium" },
      { port: 443, service: "HTTPS", version: "nginx 1.18.0", state: "open", risk: "low" },
      { port: 3306, service: "MySQL", version: "MySQL 8.0.25", state: "open", risk: "high" },
      { port: 8080, service: "HTTP-Proxy", version: "Apache 2.4.41", state: "filtered", risk: "medium" }
    ],
    services: [
      { name: "nginx", version: "1.18.0", cpe: "cpe:2.3:a:nginx:nginx:1.18.0", vulns: 3 },
      { name: "OpenSSH", version: "8.2p1", cpe: "cpe:2.3:a:openbsd:openssh:8.2", vulns: 1 },
      { name: "MySQL", version: "8.0.25", cpe: "cpe:2.3:a:oracle:mysql:8.0.25", vulns: 5 }
    ],
    osFingerprint: {
      os: "Linux 5.4.0",
      confidence: 95,
      details: "Ubuntu 20.04.3 LTS (Focal Fossa)"
    }
  };

  const runPortScan = async () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate port scanning with progress
    for (let i = 0; i <= 100; i += 10) {
      setScanProgress(i);
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    setResults(mockScanResults);
    setIsScanning(false);
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'high': return 'text-destructive';
      case 'medium': return 'text-warning';
      case 'low': return 'text-primary';
      default: return 'text-muted-foreground';
    }
  };

  const getRiskBadge = (risk: string) => {
    switch (risk) {
      case 'high': return 'danger-glow';
      case 'medium': return 'bg-warning/20 text-warning';
      case 'low': return 'bg-primary/20 text-primary';
      default: return '';
    }
  };

  const scanTypes = [
    { name: "TCP Connect Scan", desc: "Full TCP connection scan", icon: Wifi },
    { name: "SYN Stealth Scan", desc: "Stealthy half-open scan", icon: Radar },
    { name: "Service Detection", desc: "Version and service enumeration", icon: Database },
    { name: "OS Fingerprinting", desc: "Operating system detection", icon: Shield }
  ];

  return (
    <div className="space-y-6">
      <Card className="terminal">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-primary">Network Scanning</h2>
          <Button 
            onClick={runPortScan}
            disabled={!target || isScanning}
            className={`${isScanning ? 'blue-glow' : 'cyber-glow'}`}
          >
            {isScanning ? (
              <>
                <Clock className="h-4 w-4 mr-2 animate-spin" />
                Scanning...
              </>
            ) : (
              'Start Port Scan'
            )}
          </Button>
        </div>

        {/* Scan Types */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          {scanTypes.map((scan) => {
            const Icon = scan.icon;
            return (
              <Card key={scan.name} className="p-4 bg-secondary/50 hover:bg-secondary/70 transition-colors">
                <Icon className="h-6 w-6 text-primary mb-2" />
                <h3 className="font-medium text-sm">{scan.name}</h3>
                <p className="text-xs text-muted-foreground">{scan.desc}</p>
              </Card>
            );
          })}
        </div>

        {/* Progress Bar */}
        {isScanning && (
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium">Scan Progress</span>
              <span className="text-sm text-muted-foreground">{scanProgress}%</span>
            </div>
            <Progress value={scanProgress} className="scan-line" />
          </div>
        )}

        {/* Results */}
        {results.openPorts.length > 0 && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-primary">Scan Results</h3>
            
            {/* OS Fingerprint */}
            {results.osFingerprint && (
              <Card className="bg-secondary/30 border-l-4 border-l-primary">
                <div className="p-4">
                  <h4 className="font-semibold mb-2 text-foreground flex items-center">
                    <Shield className="h-4 w-4 mr-2" />
                    Operating System Detection
                  </h4>
                  <div className="text-sm">
                    <span className="text-muted-foreground">OS:</span>
                    <span className="ml-2 text-foreground font-mono">{results.osFingerprint.os}</span>
                    <Badge className="ml-2 bg-primary/20 text-primary">
                      {results.osFingerprint.confidence}% confidence
                    </Badge>
                  </div>
                  <div className="text-sm mt-1">
                    <span className="text-muted-foreground">Details:</span>
                    <span className="ml-2 text-foreground font-mono">{results.osFingerprint.details}</span>
                  </div>
                </div>
              </Card>
            )}

            {/* Open Ports */}
            <Card className="bg-secondary/30 border-l-4 border-l-accent">
              <div className="p-4">
                <h4 className="font-semibold mb-3 text-foreground flex items-center">
                  <Radar className="h-4 w-4 mr-2" />
                  Open Ports & Services
                </h4>
                <div className="space-y-2">
                  {results.openPorts.map((port, index) => (
                    <div key={index} className="bg-card/50 p-3 rounded border-l-2 border-l-transparent hover:border-l-primary transition-all">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <Badge variant="outline" className="font-mono text-lg px-3">
                            {port.port}
                          </Badge>
                          <div>
                            <div className="flex items-center space-x-2">
                              <span className="font-medium text-foreground">{port.service}</span>
                              <Badge 
                                variant="secondary" 
                                className={getRiskBadge(port.risk)}
                              >
                                {port.risk.toUpperCase()}
                              </Badge>
                            </div>
                            <div className="text-sm text-muted-foreground font-mono">
                              {port.version} â€¢ State: {port.state}
                            </div>
                          </div>
                        </div>
                        {port.risk === 'high' && (
                          <AlertCircle className="h-5 w-5 text-destructive" />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </Card>

            {/* Service Versions */}
            <Card className="bg-secondary/30 border-l-4 border-l-warning">
              <div className="p-4">
                <h4 className="font-semibold mb-3 text-foreground flex items-center">
                  <Database className="h-4 w-4 mr-2" />
                  Service Enumeration
                </h4>
                <div className="space-y-2">
                  {results.services.map((service, index) => (
                    <div key={index} className="bg-card/50 p-3 rounded">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="flex items-center space-x-2">
                            <span className="font-medium text-foreground">{service.name}</span>
                            <span className="text-sm text-muted-foreground font-mono">{service.version}</span>
                          </div>
                          <div className="text-xs text-muted-foreground font-mono mt-1">
                            CPE: {service.cpe}
                          </div>
                        </div>
                        <Badge 
                          variant={service.vulns > 3 ? "destructive" : "secondary"}
                          className={service.vulns > 3 ? "danger-glow" : ""}
                        >
                          {service.vulns} CVEs
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </Card>
          </div>
        )}
      </Card>
    </div>
  );
};